name: Deploy to VM

on:
  push:
    branches: [ main, master ]  # Adjust branch names as needed
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'  # Adjust version as needed
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Create deployment archive
      run: |
        tar -czf deploy.tar.gz \
          --exclude=node_modules/.cache \
          --exclude=.git \
          --exclude=.github \
          --exclude=*.log \
          .next \
          package.json \
          package-lock.json \
          node_modules \
          public \
          ecosystem.config.js

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ secrets.VM_PORT }} ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to VM
      run: |
        # Create deployment directory if it doesn't exist
        ssh -i ~/.ssh/id_rsa -p ${{ secrets.VM_PORT }} ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "mkdir -p ${{ secrets.DEPLOY_DIR }}"
        
        # Copy the deployment archive
        scp -i ~/.ssh/id_rsa -P ${{ secrets.VM_PORT }} deploy.tar.gz ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ secrets.DEPLOY_DIR }}/
        
        # Extract and setup on VM
        ssh -i ~/.ssh/id_rsa -p ${{ secrets.VM_PORT }} ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
          cd ${{ secrets.DEPLOY_DIR }}
          
          # Stop the current application (if running)
          pm2 stop ecosystem.config.js || pm2 stop all || true
          
          # Extract new files
          tar -xzf deploy.tar.gz
          
          # Install/update dependencies (optional, since we're copying node_modules)
          # npm ci --only=production
          
          # Start/restart application with PM2
          if [ -f ecosystem.config.js ]; then
            pm2 startOrRestart ecosystem.config.js
          else
            pm2 start npm --name "my-app" -- start
          fi
          
          # Save PM2 configuration
          pm2 save
          
          # Cleanup
          rm deploy.tar.gz
        EOF

    - name: Cleanup SSH key
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa
